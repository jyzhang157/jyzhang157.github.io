---
layout: post
title:  "《第一行代码》阅读笔记-活动"
date:   2019-03-28 +0800
---
### 活动
Activity 是可以包含用户界面的组件，用于与用户进行交互。
### 手动创建活动
- 需要创建活动（在app/src/main/java/com.example.activitytest中），任何活动都需要对activity的onCreate()方法进行重写
- 创建和加载相应的布局：
    1. 创建布局在app/src/main/res中创建，最好先创建命名符合的文件夹，再在文件夹中创建布局，这里创建的布局反映了整体界面的样子
    2. 创建的布局文件中需要添加相应的元素，如要在布局中添加一个按钮，需要设定相应的id等参数
    ```
    //D:\Codes\ActivityTest\app\src\main\res\layout\fist_layout.xml
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical" android:layout_width="match_parent"
    android:layout_height="match_parent">
    **<Button
        android:id="@+id/button_1"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Button 1"
        />**
    </LinearLayout>
    ```
    3. 布局创建完成需要在Activity中对布局进行加载 setContenView()
    ```
    //D:\Codes\ActivityTest\app\src\main\java\com\example\activitytest\FirstActivity.java
    package com.example.activitytest;

    import android.support.v7.app.AppCompatActivity;
    import android.os.Bundle;

    public class FirstActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        **setContentView(R.layout.fist_layout);**
        }
    }
    ```
- 所有的活动需要在AndroidManifest.xml文件中注册
    >注意每个程序基本都是需要配置主活动，不然无法成功运行程序
    >注册的方法就是在activity标签中加入<intent-filter>标签
```
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.activitytest">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity android:name=".FirstActivity">
            **<intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>**
        </activity>
    </application>

</manifest>
```

### Toast
在活动中，通过findViewById()找到布局中定义的元素（如按钮等），传入id，并且返回的结果要向下转型成对应的widget（如Button）

通过setOnClickListener()方法位按钮注册一个监听器，点击按钮就会调用监听器中的onClick()

Toast的用法通过makeTest()来创建Toast对象
```
 protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.fist_layout);
        **Button button1=(Button) findViewById(R.id.button_1);
        button1.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v){
                Toast.makeText(FirstActivity.this,"You clicked Button 1",Toast.LENGTH_LONG).show();
            }
        });**
    }
```

### Menu
1. 创建menu资源文件，app/main/res/menu下新建资源文件
2. 在生成的xml文件中添加item，用来生成对应的菜单项
```
<menu xmlns:android="http://schemas.android.com/apk/res/android">

    <item
        android:id="@+id/add_item"
        android:title="Add"/>
    <item
        android:id="@+id/remove_item"
        android:title="Remove"/>
</menu>
```
3. 在活动中重写onCreateOptionsMenu()方法（快捷键ctrl+o）
```
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main,menu);
        return true;
    }
```
其中getMenuInflater()方法能够得到MenuInflater对象，方法inflate()可以给当前活动创建菜单，两个参数，第一个是menu对应的资源文件，第二个指定菜单添加到哪个menu对象中
4. 重写onOptionItemSelected()方法，用来触发案件对应的功能
```
 public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()){
            case R.id.add_item:
                Toast.makeText(this,"You clicked Add",Toast.LENGTH_LONG).show();
                break;
            case R.id.remove_item:
                Toast.makeText(this,"You clicked Remove",Toast.LENGTH_LONG).show();
                break;
            default:
        }
```

### 销毁活动
Activity类提供了finish()方法，用来销毁当前活动，与按下back按键是一致的效果

### 使用intent在活动中穿梭
先创建第二个活动：
创建活动、创建布局、加载布局、在AndroidManifest.xml中注册（不需要设置为主活动）

intent主要用于启动活动、启动服务以及发送广播等场景
#### 显式intent
```
button1.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v){
                Intent intent=new Intent(FirstActivity.this,SecondActivity.class);
                startActivity(intent);
            }
        });
```
#### 隐式intent
隐式intent通过分析，找出合适的活动去启动

根据对应活动的action和category等信息来分析  
具体配置方法：在AndroidManifest.xml中的<intent-filter>中添加如下代码
```
 <activity android:name=".SecondActivity">
            <intent-filter>
                <action android:name="com.example.activitytest.ACTION_START"/>
                <category android:name="android.intent.category.DEFAULT"/>
            </intent-filter>
</activity>
```
点击事件修改为
```
 button1.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v){
                Intent intent=new Intent("com.example.activitytest.ACTION_START");
                intent.addCategory("com.example.activitytest.DEFAULT");
                startActivity(intent);
            }
        });
```
DEFAULT可以任意修改


##### 隐式intent用于启动其他程序
- 显示网页，通过调用系统的浏览器
```
        button1.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v){
                Intent intent=new Intent(Intent.ACTION_VIEW);
                intent.setData(Uri.parse("http://www.baidu.com"));
                startActivity(intent);
            }
        });
```
Intent.ACTION_VIEW是android系统内置的动作（对应的常量为android.intent.action.VIEW）  
在<intent-filter>中添加<data>标签，可以指定活动能过响应什么类型的数据
- android:scheme指定数据的协议,如http
- android:host指定主机名:www.baidu.com
- android:port指定数据的端口
- android:path指定主机名和端口之后的部分
- android:mimeType指定可以处理的数据类型，可以使用通配符
##### 向下一个活动传递数据
intent可以用于在启动活动的时候传递数据

先把要传递的数据暂存在intent中(putExtra())，再再另一个活动中取出
```
//FirstActivity
button1.setOnClickListener(new View.OnClickListener()
        {
            @Override
            public void onClick(View v){
                String data="Hello SecondActivity";
                Intent intent=new Intent(FirstActivity.this,SecondActivity.class);
                intent.putExtra("extra_data",data);
                startActivity(intent);
            }

        });
//SecondActivity
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.second_layout);
        Intent intent=getIntent();
        String data=intent.getStringExtra("extra_data");
        Log.d("SecondActivity",data);
    }
```